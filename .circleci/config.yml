version: 2.1
jobs:
    build:
        docker:
            - image: python:3.7.3-stretch

        working_directory: ~/repo

        steps:
            - checkout
            # Download and cache dependencies
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "requirements.txt" }}
                    # fallback to using the latest cache if no exact match is found
                    - v1-dependencies-
            
            - run:
                name: install dependencies
                command: |
                    python3 -m venv venv
                    . venv/bin/activate
                    make install
                    # Install hadolint
                    wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                    chmod +x /bin/hadolint
                    
            - save_cache:
                paths: [./venv]
                key: v1-dependencies-{{ checksum "requirements.txt" }}
                
            # run lint!
            - run:
                name: run lint
                command: |
                    . venv/bin/activate
                    make lint
                
            - run:
                name: run tests
                command: |
                    . venv/bin/activate
                    make test
    
    create_image:
        machine:
            image: ubuntu-2204:2022.04.2
        
        working_directory: ~/repo

        steps:
            - checkout
            # Download and cache dependencies
#            - restore_cache:
#                keys:
#                    - v1-dependencies-{{ checksum "requirements.txt" }}
                    # fallback to using the latest cache if no exact match is found
#                    - v1-dependencies-
#            - run:
#                name: install aws cli
#                command: |
#                    sudo apt-get install zip
#                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#                    unzip awscliv2.zip
#                    sudo ./aws/install
                    
            - run:
                name: build and tag image
                command: |
                    docker build --tag=capstone .
                    docker image ls
            
            - run:
                name: tag the image and upload to ECR
                command: |
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 237863785462.dkr.ecr.us-east-1.amazonaws.com
                    sudo docker tag capstone:latest 237863785462.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
                    sudo docker push 237863785462.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
        
    deploy_app:   
        docker:
            - image: cimg/aws:2022.06
        
        working_directory: ~/repo

        steps:
            - checkout
            # Download and cache dependencies
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "requirements.txt" }}
                    # fallback to using the latest cache if no exact match is found
                    - v1-dependencies-
            
            - run:
                name: install kubectl
                command: |
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    sudo install -m 0755 kubectl /usr/bin/kubectl
                    kubectl version --client
            - run:
                name: update kube config
                command: |
                    mkdir ~/.kube
                    touch ~/.kube/config
                    aws eks --region us-east-1 update-kubeconfig --name capstoneProj
            
            - run:
                name: deploy the app 
                command: |
                    kubectl get nodes
                    kubectl apply -f deployment.yaml
                    kubectl get deployments
            
            - run:
                name: deploy service
                command: |
                    kubectl apply -f service.yaml
                    kubectl get services
                    kubectl get pods -o wide
    smoketest:
    switchtogreen:

workflows:
    default:
        jobs:
            - build
            - create_image:
                requires: [build]
#            - deploy_app:
#                requires: [create_image]
